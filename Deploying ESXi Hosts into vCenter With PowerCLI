# 09 Oct 2019
# Script to configure NFS, iSCSI service and disks in Windows Server, and deploy Esxi Hosts into vCenter, add NIC, attach VMKernel, and add IP addresses, configure NFS and iSCSI network storage, from a CSV file

# Captures all actions during script runtime and saves output to a txt file
Start-Transcript -path C:\output.txt -append

# CSV file with all data
$csvFile = Import-CSV -Path C:\Users\Administrator\Desktop\esxiHostsDeployment.csv

# INSTALL NFS SERVICE, CONFIGURE NFS ON DRIVE, AND ADD NFS CLIENTS, AND PERMISSION

# Installs the NFS Service
Install-WindowsFeature FS-NFS-Service -IncludeAllSubFeature -IncludeManagementTools

# Creates new NFS Share
New-NfsShare -Name 'NFS' -Path 'E:\' -EnableUnmappedAccess $True

# Obtains IP Address from the CSV file to add to the  NFS Share
foreach ($NFSRow in $csvFile)
   {
      $vHosts = $NFSRow.Hosts
      $vSwitch = $NFSRow.Switch
      $ip = $NFSRow.IP

      if ($vSwitch -contains 'NFSSwitch')
         {
            # Configures the NFS Share
            Grant-NfsSharePermission -Name 'NFS' -ClientName $ip -ClientType 'Host' -Permission 'readwrite' -AllowRootAccess:$false
         }
   }

# INSTALL ISCSI SERVICE, CONFIGURE ISCSI DISKS,AND IP ADDRESS TO TARGETNAMES, AND MAP VIRTUALDISKS TO TARGETS

# Install the iSCSI Service
Install-WindowsFeature FS-iSCSITarget-Server -IncludeManagementTools

# Start the iSCSI service
Start-Service msiscsi

# Creates new iSCSI Virtual Disks
New-IscsiVirtualDisk -Path "F:\iSCSI1.vhdx" -Size 256GB
New-IscsiVirtualDisk -Path "G:\iSCSI2.vhdx" -Size 256GB

# Initiator Id address being added to the iSCSI Target Server using the format switch
$initiatorId = $csvFile | Where-Object{ $_.VMK -match 'iSCSI1|iSCSI2'} | ForEach-Object{'IPAddress:{0}' -f $_.IP}

# Creating the new iSCSI Server Target
New-IscsiServerTarget -TargetName esxiHosts -InitiatorId $initiatorId

# Mapping the Virtual Disks to the Target
Add-IscsiVirtualDiskTargetMapping -TargetName "esxiHosts" -DevicePath "F:\iSCSI1.vhdx"
Add-IscsiVirtualDiskTargetMapping -TargetName "esxiHosts" -DevicePath "G:\iSCSI2.vhdx"

# DEPLOY ESXI HOSTS AND CONFIGURE THEIR NETWORK, NFS, ISCSI, AND VSAN STORAGE

# Connects to the server and saves the credentials to the server
Connect-VIServer vcsa.v.lab -User Admin -Password pass -SaveCredentials

# Connects to the server using the username or password stored in the server using New-VICredentialStoreItem command
Connect-VIServer vcsa.v.lab

# Create new Datacenter
$dc = New-Datacenter -location (Get-Folder -NoRecursion) -Name vDatacenter

# Create New Clusters
New-Cluster -Name iSCSI_Cluster -Location $dc
New-Cluster -Name vSAN_Cluster -Location $dc

# Read data from the CSV file
foreach ($val in $csvFile)
   {
      $esxiHosts = $val.Hosts
      $clusterName = $val.Cluster
      $virtualSwitch = $val.Switch
      $nic = $val.NIC
      $vmK = $val.VMK
      $ip = $val.IP

      # Adds ESXi hosts to the Clusters
      Add-VMHost $esxiHosts -User root -Password "" -Location $clusterName -Force -ErrorAction SilentlyContinue

      # Checks if a Virtual Switch exists
      try
         {
            $gSwitch = Get-VirtualSwitch -Name $virtualSwitch -VMHost $esxiHosts -ErrorAction Stop
         }
      # IF the switch does not exist, a new one is created
      catch
         {
            $gSwitch = New-VirtualSwitch -Name $virtualSwitch -VMHost $esxiHosts
         }

      # Gets the ESxi Hosts Physical Network Adapters (vmincs)
      $nAdapter = Get-VMHostNetworkAdapter -VMHost $esxiHosts -Physical -Name $nic
      
      # Attachs vmnics to the Virtual Switch
      $gSwitch | Add-VirtualSwitchPhysicalNetworkAdapter -VMHostPhysicalNic $nAdapter -Confirm:$false
      
      # Creates new VMKernel and adds PortGroups
      New-VMHostNetworkAdapter -VMhost $esxiHosts -PortGroup $vmK -IP $ip -subnetmask 255.255.255.0 -VirtualSwitch $gSwitch -confirm:$false *>> C:\networkadapter_info.txt
   }

# Gets all Hosts from the iSCSI Cluster
$VMHosts = Get-Cluster "iSCSI_Cluster" | Get-VMHost

# Creates new NFS Datastore attached to all the hosts in all the clusters
Get-Cluster | Get-VMHost | New-Datastore -Nfs -Name NFS -Path /NFS -NfsHost 192.168.3.10

# Sets Teaming And Failover Policy for PortGroups for compatibility in Network Port Binding
$VMHosts | Get-VirtualPortGroup -Name iSCSI1 | Get-NicTeamingPolicy | Set-NicTeamingPolicy -MakeNicActive vmnic3
$VMHosts | Get-VirtualPortGroup -Name iSCSI2 | Get-NicTeamingPolicy | Set-NicTeamingPolicy -MakeNicActive vmnic4

# Enables Software iSCSI Adapter for hosts
Get-VMHostStorage -VMHost $VMHosts | Set-VMHostStorage -SoftwareIScsiEnabled $True

# Sets the Dynamic discovery IP address
$VMHosts | Get-VMHosthba -Type iSCSI | New-IScsiHbaTarget -Type Send -Address 192.168.4.10

# Update iSCSI Target connection
Update-IscsiTarget

# Configures Network Port Binding for iSCSI drives
$esxcli = Get-Esxcli -VMHost ($VMHosts)
$VMHosts | ForEach-Object -Process {
   $esxcli = Get-EsxCli -V2 -VMHost $_
   $bindvmk3 = @{
      adapter = 'vmhba65'
      force = $true
      nic = 'vmk3'
    }
   $esxcli.iscsi.networkportal.add.Invoke($bindvmk3)
   $bindvmk4 = @{
      adapter = 'vmhba65'
      force = $true
      nic = 'vmk4'
    }
   $esxcli.iscsi.networkportal.add.Invoke($bindvmk4)
}

# Rescans HBAs after enabling Software iSCSI Adapter
$VMHosts | Get-VMHostStorage -RescanAllHba -Refresh

# Gets the iSCSI disks attached to the iSCSI Cluster, tne -Unique switch returns the results once only since all the servers are attached to 2 disks, results are repeated
$iSCSIDisks = $VMHosts | Get-ScsiLun -CanonicalName "naa.*" | ForEach-Object {'{0}' -f $_.CanonicalName} | Sort-Object -Unique

# Numbering disks when naming
$disknum = 1

# Loop to create number Datastores based on number of iSCSI disks
for($i = 0;$i -le $VMHosts.length;$i++)
   {
      New-Datastore -VMhost $VMHosts[$i] -Name "iSCSI$disknum" -Path $iSCSIDisks[$i] -vmfs
      $disknum+=1
}

# Create a new Datastore Cluster in the Virtual Datacenter, gets the newly created Cluster as a result in a specified format, and moves the existing iSCSI Datastores into the iSCSI Datastore Cluster
New-DatastoreCluster -Name "iSCSIDiskCluster" -Location "vDatacenter"
$DSCluster = Get-DatastoreCluster | Where {'{0}'-f $_.Name}
$DS = $VMhosts | Get-Datastore | Where {$_.Name -match "iscsi"}
Get-Datastore $DS | Move-Datastore -Destination $DSCluster

# Stops captures all actions
Stop-Transcript
